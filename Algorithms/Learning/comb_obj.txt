Combinatorial objects of algorithms:

1) Permutations
Arrangements or ordering of items.
{1,4,3,2} and {4,3,2,1} are two distinct permutations of the same set of four integers
Permutations can be the object in question whenever your problem seeks an "arrangement", "tour", "ordering" or "sequence".

2) Subsets
Selections from a set of items.
{1,3,4} and {2} are two distinct subsets of the first four integers.
Order does not matter in subsets - {1,3,4} and {4,3,1} are considered identical.
Subsets can be the object in question whenever your problem seeks a "cluster", "collection", "committee", "group", "packaging" or "selection".

3) Trees
Represent hierarchical relationships between items.
*Algorithm Design Manual, page 32, figure 1.8(a)*
Trees are likely the object in question whenever your problem seeks a "hierarchy", "dominance relationship", "ancestor/descendant relationship" or "taxonomy".

4) Graphs
Represent relationships between arbitrary pairs of objects.
*Algorithm Design Manual, page 32, figure 1.8(b)* models a network of roads as a graph, where the vertices are cities and the edges are roads connecting pairs of cities.
Graphs are likely the object in question whenever you seek a "network", "circuit", "web" or "relationship".

5) Points
Represent locations in some geometric space.
For example, the locations of McDonald's restaurants can be described by points on a map/plane.
Points are likely the object in question whenever your problems work on "sites", "positions", "data records" or "locations".

6) Polygons
Represent regions in some geometric spaces.
Borders of a country can be described by a polygon on a map/plane.
Polygons and polyhedra are likely the object in question whenever you're working on "shapes", "regions", "configurations" or "boundaries".

7) Strings
Represent sequences of characters or patterns.
Names of students in a class can be represented by strings.
Strings are likely the object in question whenenver you are dealing with "text", "characters", "patterns" or "labels".


Recursive Objects:

1) Permutations
Delete the first element of a permutation of {1,...,n} things and you get a permutation of the remaining n-1 things.

2) Subsets
Every subset of the elements {1,...,n} contains a subset of {1,...,n - 1} made visible by deleting element n if it is present.

3) Trees
Delete the root of a tree and you get a collection of smaller trees.
Delete any leaf of a tree and you get a slightly smaller tree.

4) Graphs
Delete any vertex from a graph and you get a smaller graph.
Divide the vertices of a graph into two groups (on left and right side). Cut through all edges which span from left to right and you get two smaller graphs and a bunch of broken edges.

5) Points
Take a cloud of points and separate tehm into two groups. Now you have two smaller clouds of points.

6) Polygons
Inserting any internal chord between two nonadjacent vertices of a simple polygon on n vertices cuts it into two smaller polygons.

7) Strings
Delete any character from a string and you will get a shorter string.















